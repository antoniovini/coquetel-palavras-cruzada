[{"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\styles\\global.js":"1","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\game\\styles.js":"2","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\board\\index.js":"3","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\game\\index.js":"4","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\tutorial\\index.js":"5","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\timer\\index.js":"6","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\button\\index.js":"7","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\games.js":"8","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\layouts\\default.js":"9","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\create\\index.js":"10","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\layouts\\menu\\styles.js":"11","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\main\\index.js":"12","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\utils\\board.js":"13","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\board\\styles.js":"14","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\index.js":"15","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\layouts\\menu\\index.js":"16","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\timer\\styles.js":"17"},{"size":306,"mtime":1606358844943,"results":"18","hashOfConfig":"19"},{"size":1028,"mtime":1606592854901,"results":"20","hashOfConfig":"19"},{"size":7296,"mtime":1606677947949,"results":"21","hashOfConfig":"19"},{"size":5156,"mtime":1606513560100,"results":"22","hashOfConfig":"19"},{"size":1075,"mtime":1606502473246,"results":"23","hashOfConfig":"19"},{"size":318,"mtime":1606418741272,"results":"24","hashOfConfig":"19"},{"size":233,"mtime":1606360936005,"results":"25","hashOfConfig":"19"},{"size":13677,"mtime":1606679424079,"results":"26","hashOfConfig":"19"},{"size":876,"mtime":1606497567495,"results":"27","hashOfConfig":"19"},{"size":6773,"mtime":1606679395993,"results":"28","hashOfConfig":"19"},{"size":1867,"mtime":1606497567497,"results":"29","hashOfConfig":"19"},{"size":310,"mtime":1606358229451,"results":"30","hashOfConfig":"19"},{"size":10448,"mtime":1606677897462,"results":"31","hashOfConfig":"19"},{"size":4195,"mtime":1606599349318,"results":"32","hashOfConfig":"19"},{"size":196,"mtime":1606355667604,"results":"33","hashOfConfig":"19"},{"size":1222,"mtime":1606497567496,"results":"34","hashOfConfig":"19"},{"size":561,"mtime":1606418836830,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"u5lzaf",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\styles\\global.js",[],["76","77"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\game\\styles.js",[],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\board\\index.js",["78"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\game\\index.js",["79","80","81","82"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport Button from \"../../components/button\";\r\nimport Timer from \"../../components/timer\";\r\nimport Board from \"../../components/board\";\r\nimport DefaultLayout from \"../../layouts/default\";\r\n\r\nimport { MdPause, MdPlayArrow } from \"react-icons/md\";\r\n\r\nimport * as S from \"./styles\";\r\nimport { checkWord, fillLetter, fillWord, getWordFromBoard } from \"../../utils/board\";\r\n\r\nimport games from '../../games';\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Game() {\r\n  const query = useQuery();\r\n  \r\n  const [board, setBoard] = useState(games[query.get('mode')][Math.floor(Math.random() * games[query.get('mode')].length)]);\r\n  const [selectedWord, setSelectedWord] = useState(1);\r\n\r\n  //Timer\r\n  const [time, setTime] = useState(0);\r\n  const [stop, setStop] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (stop) {\r\n      return null;\r\n    } else {\r\n      let tempo = setInterval(() => {\r\n        setTime((old) => old + 1);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(tempo);\r\n      };\r\n    }\r\n  }, [stop]);\r\n\r\n  const minutes =\r\n    Math.floor(time / 60) < 10\r\n      ? \"0\" + Math.floor(time / 60)\r\n      : Math.floor(time / 60);\r\n  const seconds = time % 60 < 10 ? \"0\" + (time % 60) : time % 60;\r\n\r\n  if (time === 3600) {\r\n    setTime(0);\r\n  }\r\n\r\n  const timer = `${minutes}:${seconds}`;\r\n\r\n  // Timer controls\r\n  const pause = () => {\r\n    localStorage.setItem(\"@time\", time);\r\n    setStop(true);\r\n  };\r\n\r\n  const start = () => {\r\n    setTime(Number(localStorage.getItem(\"@time\")));\r\n    setStop(false);\r\n  };\r\n\r\n  const onUpdate = (board) => {\r\n    setBoard(board);\r\n  }\r\n\r\n  const onCorrect = () => {\r\n    setBoard(fillWord(board, selectedWord));\r\n    if(selectedWord < board.words.length){\r\n      setSelectedWord(word => word + 1);\r\n    }else{\r\n      setSelectedWord(1);\r\n    }\r\n  }\r\n\r\n  const onSolution = () => {\r\n    const words = board.words;\r\n    words.map((word) => {\r\n      const copy = {...fillWord(board, word.word)};\r\n      setBoard(copy);\r\n    });\r\n  }\r\n\r\n  const onCheck = () => {\r\n    const typedWord = getWordFromBoard(board.data, selectedWord);\r\n    setBoard(checkWord(board, selectedWord, typedWord));\r\n    if(selectedWord < board.words.length){\r\n      setSelectedWord(word => word + 1);\r\n    }else{\r\n      setSelectedWord(1);\r\n    }\r\n  }\r\n\r\n  const onTip = () => {\r\n    setBoard(fillLetter(board, selectedWord));\r\n  }\r\n\r\n  return (\r\n    <S.Container>\r\n      <S.Box>\r\n        <div className=\"header\">\r\n          <Timer time={timer}>\r\n            {!stop ? (\r\n              <MdPause\r\n                size={30}\r\n                onClick={() => pause()}\r\n                className=\"startstop\"\r\n              />\r\n            ) : (\r\n                <MdPlayArrow\r\n                  size={30}\r\n                  onClick={() => start()}\r\n                  className=\"startstop\"\r\n                />\r\n              )}\r\n          </Timer>\r\n          <Button\r\n            onClick={onCorrect}\r\n          >Corrigir</Button>\r\n          <Button\r\n            onClick={onCheck}\r\n          >Checar</Button>\r\n          <Button\r\n            onClick={onTip}\r\n          >Dica</Button>\r\n          <Button\r\n            onClick={onSolution}\r\n          >Solução</Button>\r\n          <Button flat>\r\n            <Link to=\"/difficulty\">\r\n              <img src={\"/assets/icons/back.png\"} height={\"20px\"} />\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n        <div className=\"board-box\">\r\n          {  board && (\r\n            <Board\r\n              game={board}\r\n              onSelect={(word) => setSelectedWord(word)}\r\n              selectedWord={selectedWord}\r\n              onUpdate={onUpdate}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"tip-box\">\r\n          { board && (\r\n            <>\r\n              <Button\r\n                flat\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  if (selectedWord === 1) {\r\n                    setSelectedWord(board.words.length);\r\n                  } else {\r\n                    setSelectedWord(selectedWord - 1);\r\n                  }\r\n                }}\r\n              >\r\n                <img src=\"/assets/left-arrow.png\" height={60} />\r\n              </Button>\r\n              <h2>\r\n                {`${selectedWord}. ` +\r\n                  board.words.filter((word) => word.word === selectedWord)[0].tip.value}\r\n              </h2>\r\n              <Button\r\n                flat\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  if (selectedWord === board.words.length) {\r\n                    setSelectedWord(1);\r\n                  } else {\r\n                    setSelectedWord(selectedWord + 1)\r\n                  }\r\n                }}\r\n              >\r\n                <img src=\"/assets/right-arrow.png\" height={60} />\r\n              </Button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </S.Box>\r\n      <h3 className=\"powered-by\">Powered by Mercadata Digital</h3>\r\n    </S.Container>\r\n  );\r\n}\r\n\r\nexport default DefaultLayout(Game);\r\n",["83","84"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\tutorial\\index.js",["85","86"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\timer\\index.js",["87"],"import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\nfunction Timer({time, children}) {\r\n  return (\r\n    <S.Container>\r\n      <img src={\"/assets/clock.png\"} />\r\n      <div className=\"content\">\r\n        <h3>{time}</h3>\r\n        {children}\r\n      </div>\r\n    </S.Container>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n",["88","89"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\button\\index.js",[],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\games.js",["90"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\layouts\\default.js",[],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\create\\index.js",["91"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\layouts\\menu\\styles.js",[],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\scenes\\main\\index.js",["92"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\utils\\board.js",["93","94","95","96"],"export const selectedCordinates = (board, word) => {\r\n  const cordinates = {};\r\n  const letters = [];\r\n\r\n  for(let y = 0; y < board.length; y++){\r\n    for(let x = 0; x < board[0].length; x++){\r\n      const letter = board[y][x];\r\n      if(Array.isArray(letter.word)){\r\n        if(letter.word.includes(word)){\r\n          letters.push({ x, y, ...letter });\r\n        }\r\n      }else if(letter.word === word) {\r\n        letters.push({ x, y, ...letter });\r\n      }\r\n    }\r\n  }\r\n\r\n  const notFilled = letters.filter((letter) => !letter.value && letter.length !== 0);\r\n\r\n  if(notFilled.length <= 0){\r\n    const lastCell = letters[letters.length - 1];\r\n    return {x: lastCell.x, y: lastCell.y};\r\n  }\r\n\r\n  for(let i = 0; i < notFilled.length; i++){\r\n    if(!notFilled[i].correct){\r\n      cordinates.x = notFilled[i].x;\r\n      cordinates.y = notFilled[i].y;\r\n      return cordinates;\r\n    }\r\n  }\r\n}\r\n\r\nexport const fillCell = (game, value, x, y, z) => {\r\n  const board = game.data;\r\n\r\n  if(board.length <= y || board[0].length <= x){\r\n    return\r\n  }\r\n\r\n  const copy = [ ...board ];\r\n  if(Number.isInteger(z)){\r\n    if(Array.isArray(copy[y][x].value)){\r\n      copy[y][x].value[z] = value;\r\n    }else{\r\n      copy[y][x].value = ['', ''];\r\n      copy[y][x].value[z] = value;\r\n    }\r\n  }else{\r\n    copy[y][x].value = value;\r\n  }\r\n\r\n  return {...game, data:copy};\r\n}\r\n\r\nexport const nextCell = (game, x, y, z, word) => {\r\n  const words = game.words;\r\n  const board = game.data;\r\n\r\n  const currWord = words.filter((w) => w.word === word)[0];\r\n\r\n  if(board[y][x].double){\r\n    const { correct } = board[y][x];\r\n    if(Array.isArray(correct)){\r\n      for(let polygon = 0; polygon <= 1; polygon++) {\r\n        if(!correct[polygon]){\r\n          return {x, y, z: polygon};\r\n        }\r\n      }\r\n    }else{\r\n      if(Number.isInteger(z)){\r\n        if(z < 1){\r\n          return {x, y, z: z+1};\r\n        }\r\n      }else{\r\n        return {x, y, z: 0};\r\n      }\r\n    }\r\n  }\r\n\r\n  if(currWord.vertical){\r\n    const range = currWord.y.split('-').map(pos => pos - 1);\r\n    if(y < range[1]){\r\n      for(let i = y+1; i <= range[1]; i++){\r\n        const { correct, double } = board[i][x];\r\n\r\n        if(double){\r\n          if(Array.isArray(correct)){\r\n            for(let polygon = 0; polygon <= 1; polygon++) {\r\n              if(!correct[polygon]){\r\n                return {x, y: i, z: polygon};\r\n              }\r\n            }\r\n          }else{\r\n            return {x, y: i, z: 0};\r\n          }\r\n        }\r\n\r\n        if(!correct){\r\n          return {y: i, x};\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if(currWord.horizontal){\r\n    const range = currWord.x.split('-').map(pos => pos - 1);\r\n    if(x < range[1]){\r\n      for(let i = x + 1; i <= range[1]; i++){\r\n        const { correct, double } = board[y][i];\r\n\r\n        if(double){\r\n          if(Array.isArray(correct)){\r\n            for(let polygon = 0; polygon <= 1; polygon++) {\r\n              if(!correct[polygon]){\r\n                return {x: i, y, z: polygon};\r\n              }\r\n            }\r\n          }else{\r\n            return {x: i, y, z: 0};\r\n          }\r\n        }\r\n\r\n        if(!correct){\r\n          return {x: i, y};\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport const backCell = (game, x, y, z, word) => {\r\n  const words = game.words;\r\n  const board = game.data;\r\n\r\n  const currWord = words.filter((w) => w.word === word)[0];\r\n\r\n  if(board[y][x].double){\r\n    const { correct } = board[y][x];\r\n    if(Array.isArray(correct)){\r\n      for(let polygon = 1; polygon > 0; polygon--) {\r\n        if(!correct[polygon]){\r\n          return {x, y, z: polygon};\r\n        }\r\n      }\r\n    }else{\r\n      if(Number.isInteger(z)){\r\n        if(z > 0){\r\n          return {x, y, z: z-1};\r\n        }\r\n      }else{\r\n        return {x, y, z: 1};\r\n      }\r\n    }\r\n  }\r\n\r\n  if(currWord.vertical){\r\n    const range = currWord.y.split('-').map(pos => pos - 1);\r\n    if(y - 1 >= range[0]){\r\n      for(let i = y - 1; i >= range[0]; i--){\r\n        const { correct, double } = board[i][x];\r\n\r\n        if(double){\r\n          if(Array.isArray(correct)){\r\n            for(let polygon = 1; polygon > 0; polygon--) {\r\n              if(!correct[polygon]){\r\n                return {x, y: i, z: polygon};\r\n              }\r\n            }\r\n          }else{\r\n            return {x, y: i, z: 1};\r\n          }\r\n        }\r\n\r\n        if(!board[i][x].correct){\r\n          return {y: i, x};\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if(currWord.horizontal){\r\n    const range = currWord.x.split('-').map(pos => pos - 1);\r\n    if(x - 1 >= range[0]){\r\n      for(let i = x - 1; i >= range[0]; i--){\r\n        const { correct, double } = board[y][i];\r\n\r\n        if(double){\r\n          if(Array.isArray(correct)){\r\n            for(let polygon = 1; polygon > 0; polygon--) {\r\n              if(!correct[polygon]){\r\n                return {x: i, y, z: polygon};\r\n              }\r\n            }\r\n          }else{\r\n            return {x: i, y, z: 1};\r\n          }\r\n        }\r\n\r\n        if(!board[y][i].correct){\r\n          return {x: i, y};\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport const getWordFromBoard = (board, word) => {\r\n  const letters = [];\r\n\r\n  for(let y = 0; y < board.length; y++){\r\n    for(let x = 0; x < board[0].length; x++){\r\n      const letter = board[y][x];\r\n      if(Array.isArray(letter.word)){\r\n        if(letter.word.includes(word)){\r\n          letters.push(letter.value || '');\r\n        }\r\n      }else if(letter.word === word) {\r\n        letters.push(letter.value || '');\r\n      }\r\n    }\r\n  }\r\n  \r\n  return letters.join('');\r\n}\r\n\r\nexport const getWord = (game, word) => {\r\n  const words = game.words;\r\n  return words.filter((w) => w.word === word)[0];\r\n}\r\n\r\nexport const fillWord = (game, word) => {\r\n  const wordInfo = getWord(game, word);\r\n  const board = game.data;\r\n  const splitedValue = wordInfo.text.split('');\r\n\r\n  const cordinates = {};\r\n  if(wordInfo.y.includes('-')){\r\n    cordinates.y = wordInfo.y.split('-').map(pos => pos - 1);\r\n    cordinates.x = wordInfo.x - 1;\r\n  }else if(wordInfo.x.includes('-')){\r\n    cordinates.y = wordInfo.y - 1;\r\n    cordinates.x = wordInfo.x.split('-').map(pos => pos - 1);\r\n  }else{\r\n    cordinates.y = wordInfo.y - 1;\r\n    cordinates.x = wordInfo.x - 1;\r\n  }\r\n\r\n  if(Array.isArray(cordinates.y)){\r\n    let counter = 0;\r\n    for(let y = cordinates.y[0]; y <= cordinates.y[1]; y++){\r\n      board[y][cordinates.x].value = splitedValue[counter];\r\n      board[y][cordinates.x].correct = true;\r\n      counter ++;\r\n    }\r\n  }else if(Array.isArray(cordinates.x)){\r\n    let counter = 0;\r\n    for(let x = cordinates.x[0]; x <= cordinates.x[1]; x++){\r\n      board[cordinates.y][x].correct = true;\r\n      board[cordinates.y][x].value = splitedValue[counter];\r\n      counter ++;\r\n    }\r\n  }else{\r\n    board[cordinates.y][cordinates.x].value = splitedValue[0];\r\n    board[cordinates.y][cordinates.x].correct = true;\r\n  }\r\n\r\n  return {...game, data: board};\r\n}\r\n\r\nexport const checkWord = (game, word, value) => {\r\n  const wordInfo = getWord(game, word);\r\n  const board = game.data;\r\n\r\n  if(value === wordInfo.text){\r\n    const cordinates = {};\r\n    if(wordInfo.y.includes('-')){\r\n      cordinates.y = wordInfo.y.split('-').map(pos => pos - 1);\r\n      cordinates.x = wordInfo.x - 1;\r\n    }else if(wordInfo.x.includes('-')){\r\n      cordinates.y = wordInfo.y - 1;\r\n      cordinates.x = wordInfo.x.split('-').map(pos => pos - 1);\r\n    }else{\r\n      cordinates.y = wordInfo.y - 1;\r\n      cordinates.x = wordInfo.x - 1;\r\n    }\r\n\r\n    if(Array.isArray(cordinates.y)){\r\n      let counter = 0;\r\n      for(let y = cordinates.y[0]; y <= cordinates.y[1]; y++){\r\n        if(!board[y][cordinates.x].correct){\r\n          board[y][cordinates.x].correct = true;\r\n        }\r\n        counter ++;\r\n      }\r\n    }else if(Array.isArray(cordinates.x)){\r\n      let counter = 0;\r\n      for(let x = cordinates.x[0]; x <= cordinates.x[1]; x++){\r\n        if(!board[cordinates.y][x].correct){\r\n          board[cordinates.y][x].correct = true;\r\n        }\r\n        counter ++;\r\n      }\r\n    }else{\r\n      if(!board[cordinates.y][cordinates.x].correct){\r\n        board[cordinates.y][cordinates.x].correct = true;\r\n      }\r\n    }\r\n  }else{\r\n    const cordinates = {};\r\n    if(wordInfo.y.includes('-')){\r\n      cordinates.y = wordInfo.y.split('-').map(pos => pos - 1);\r\n      cordinates.x = wordInfo.x - 1;\r\n    }else if(wordInfo.x.includes('-')){\r\n      cordinates.y = wordInfo.y - 1;\r\n      cordinates.x = wordInfo.x.split('-').map(pos => pos - 1);\r\n    }else{\r\n      cordinates.y = wordInfo.y - 1;\r\n      cordinates.x = wordInfo.x - 1;\r\n    }\r\n\r\n    if(Array.isArray(cordinates.y)){\r\n      let counter = 0;\r\n      for(let y = cordinates.y[0]; y <= cordinates.y[1]; y++){\r\n        if(!board[y][cordinates.x].correct){\r\n          board[y][cordinates.x].failed = true;\r\n        }\r\n        counter ++;\r\n      }\r\n    }else if(Array.isArray(cordinates.x)){\r\n      let counter = 0;\r\n      for(let x = cordinates.x[0]; x <= cordinates.x[1]; x++){\r\n        if(!board[cordinates.y][x].correct){\r\n          board[cordinates.y][x].failed = true;\r\n        }\r\n        counter ++;\r\n      }\r\n    }else{\r\n      if(!board[cordinates.y][cordinates.x].correct){\r\n        board[cordinates.y][cordinates.x].failed = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {...game, data: board};\r\n}\r\n\r\nexport const getNotCorrect = (game, word) => {\r\n  const board = game.data;\r\n  const cordinates = [];\r\n\r\n  let counter = 0;\r\n  for(let y = 0; y < board.length; y++){\r\n    for(let x = 0; x < board[0].length; x++){\r\n      const letter = board[y][x];\r\n      if(Array.isArray(letter.word)){\r\n        if(letter.word.includes(word)){\r\n          if(!letter.correct){\r\n            cordinates.push({ x, y, id: counter });\r\n          }\r\n          counter++;\r\n        }\r\n      }else if(letter.word === word) {\r\n        if(!letter.correct){\r\n          cordinates.push({ x, y, id: counter });\r\n        }\r\n        counter++;\r\n      }\r\n    }\r\n  }\r\n\r\n  return cordinates;\r\n}\r\n\r\nexport const fillLetter = (game, word) => {\r\n  const board = game.data;\r\n  const wordInfo = getWord(game, word);\r\n\r\n  const notCorrect = getNotCorrect(game, word);\r\n  const random = notCorrect[Math.floor(Math.random() * notCorrect.length)];\r\n\r\n  if(!random){\r\n    return {...game};\r\n  }\r\n\r\n  console.log(random.x, random.y, board[random.y][random.x]);\r\n\r\n  board[random.y][random.x].correct = true;\r\n  board[random.y][random.x].value = wordInfo.text[random.id];\r\n\r\n  return {...game, data: board};\r\n}","E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\board\\styles.js",[],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\index.js",[],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\layouts\\menu\\index.js",["97","98","99","100"],"E:\\Users\\anton\\Documents\\Mercadata Digital\\Projetos\\Coquetel\\palavras-cruzadas\\game\\src\\components\\timer\\styles.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":36,"column":6,"nodeType":"107","endLine":36,"endColumn":20,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":81,"column":22,"nodeType":"111","messageId":"112","endLine":81,"endColumn":24},{"ruleId":"113","severity":1,"message":"114","line":134,"column":15,"nodeType":"115","endLine":134,"endColumn":69},{"ruleId":"113","severity":1,"message":"114","line":162,"column":17,"nodeType":"115","endLine":162,"endColumn":65},{"ruleId":"113","severity":1,"message":"114","line":179,"column":17,"nodeType":"115","endLine":179,"endColumn":66},{"ruleId":"101","replacedBy":"116"},{"ruleId":"103","replacedBy":"117"},{"ruleId":"113","severity":1,"message":"114","line":16,"column":11,"nodeType":"115","endLine":16,"endColumn":65},{"ruleId":"113","severity":1,"message":"114","line":21,"column":15,"nodeType":"115","endLine":21,"endColumn":69},{"ruleId":"113","severity":1,"message":"114","line":8,"column":7,"nodeType":"115","endLine":8,"endColumn":40},{"ruleId":"101","replacedBy":"118"},{"ruleId":"103","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":1,"nodeType":"122","endLine":498,"endColumn":3},{"ruleId":"105","severity":1,"message":"123","line":146,"column":6,"nodeType":"107","endLine":146,"endColumn":8,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":1,"column":8,"nodeType":"127","messageId":"128","endLine":1,"endColumn":13},{"ruleId":"125","severity":1,"message":"129","line":298,"column":9,"nodeType":"127","messageId":"128","endLine":298,"endColumn":16},{"ruleId":"125","severity":1,"message":"129","line":306,"column":9,"nodeType":"127","messageId":"128","endLine":306,"endColumn":16},{"ruleId":"125","severity":1,"message":"129","line":332,"column":9,"nodeType":"127","messageId":"128","endLine":332,"endColumn":16},{"ruleId":"125","severity":1,"message":"129","line":340,"column":9,"nodeType":"127","messageId":"128","endLine":340,"endColumn":16},{"ruleId":"125","severity":1,"message":"130","line":2,"column":16,"nodeType":"127","messageId":"128","endLine":2,"endColumn":26},{"ruleId":"113","severity":1,"message":"114","line":16,"column":13,"nodeType":"115","endLine":16,"endColumn":67},{"ruleId":"113","severity":1,"message":"114","line":21,"column":19,"nodeType":"115","endLine":21,"endColumn":73},{"ruleId":"113","severity":1,"message":"114","line":30,"column":19,"nodeType":"115","endLine":30,"endColumn":44},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'game.data'. Either include it or remove the dependency array. If 'setFocus' needs the current value of 'game.data', you can also switch to useReducer instead of useState and read 'game.data' in the reducer.","ArrayExpression",["133"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["131"],["132"],["131"],["132"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'config.words', 'config.x', and 'config.y'. Either include them or remove the dependency array.",["134"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'counter' is assigned a value but never used.","'useHistory' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [game.data, selectedWord]",{"range":"139","text":"140"},"Update the dependencies array to be: [config.words, config.x, config.y]",{"range":"141","text":"142"},[1003,1017],"[game.data, selectedWord]",[3336,3338],"[config.words, config.x, config.y]"]